AWSTemplateFormatVersion: '2010-09-09'
Description: Create Security Groups for the AEM Stack (qs-1r4pm2nt3)
Parameters:
  AuthorDispatcherELBSecurityGroupInboundCidrIpParameter:
    Description: AEM Author Dispatcher ELB Security Group Inbound Cidr Ip
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
    Type: String
  AOCStackPrefix:
    Description: The AEM Stack Prerequisite Resources Stack Prefix
    Type: String
  PrivateSubnetInternetOutboundCidrIpParameter:
    Description: AEM Stack Private Subnet Internet Outbound Cidr Ip Destination
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
    Type: String
  PublishDispatcherELBSecurityGroupInboundCidrIpParameter:
    Description: AEM Publish Dispatcher ELB Security Group Inbound Cidr Ip
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
    Type: String
  SecureShellInboundCidrIpParameter:
    Description: AEM Stack Secure Shell Inbound Cidr Ip
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
    Type: String
Resources:
  AuthorDipatcherELBSecurityGroupEgress0:
    Properties:
      Description: "ELB to Author-Dispatcher via HTTPS"
      DestinationSecurityGroupId:
        Ref: AuthorDispatcherSecurityGroup
      FromPort: 443
      GroupId:
        Ref: AuthorDispatcherELBSecurityGroup
      IpProtocol: tcp
      ToPort: 443
    Type: AWS::EC2::SecurityGroupEgress
  AuthorDipatcherSecurityGroupEgress0:
    Properties:
      Description: "Author-Dispatcher to ELB via HTTPS"
      DestinationSecurityGroupId:
        Ref: AuthorELBSecurityGroup
      FromPort: 443
      GroupId:
        Ref: AuthorDispatcherSecurityGroup
      IpProtocol: tcp
      ToPort: 443
    Type: AWS::EC2::SecurityGroupEgress
  AuthorDipatcherSecurityGroupEgress1:
    Properties:
      Description: "Author-Dispatcher to Private Subnet via HTTPS"
      CidrIp:
        Ref: PrivateSubnetInternetOutboundCidrIpParameter
      FromPort: 443
      GroupId:
        Ref: AuthorDispatcherSecurityGroup
      IpProtocol: tcp
      ToPort: 443
    Type: AWS::EC2::SecurityGroupEgress
  AuthorDispatcherELBSecurityGroup:
    Properties:
      GroupDescription: AEM Author Dispatcher ELB Security Group
      Tags:
      - Key: Name
        Value: AEM Author Dispatcher ELB Security Group
      - Key: StackPrefix
        Value:
          Ref: AOCStackPrefix
      VpcId: !Sub "{{resolve:ssm:/${AOCStackPrefix}/network/vpcid:1}}"
    Type: AWS::EC2::SecurityGroup
  AuthorDispatcherELBSecurityGroupIngress0:
    Properties:
      Description: "Author-Dispatcher ELB HTTPS Ingress from Inbound CIDR"
      CidrIp:
        Ref: AuthorDispatcherELBSecurityGroupInboundCidrIpParameter
      FromPort: 443
      GroupId:
        Ref: AuthorDispatcherELBSecurityGroup
      IpProtocol: tcp
      ToPort: 443
    Type: AWS::EC2::SecurityGroupIngress
  AuthorDispatcherSecurityGroup:
    Properties:
      GroupDescription: AEM Author Dispatcher Security Group
      Tags:
      - Key: Name
        Value: AEM Author Dispatcher Security Group
      - Key: StackPrefix
        Value:
          Ref: AOCStackPrefix
      VpcId: !Sub "{{resolve:ssm:/${AOCStackPrefix}/network/vpcid:1}}"
    Type: AWS::EC2::SecurityGroup
  AuthorDispatcherSecurityGroupIngress0:
    Properties:
      Description: "Author-Dispatcher HTTPS Ingress from ELB"
      FromPort: 443
      GroupId:
        Ref: AuthorDispatcherSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId:
        Ref: AuthorDispatcherELBSecurityGroup
      ToPort: 443
    Type: AWS::EC2::SecurityGroupIngress
  AuthorDispatcherSecurityGroupIngress1:
    Properties:
      Description: "Author-Dispatcher AEM Ingress from AEM Author"
      FromPort: 5432
      GroupId:
        Ref: AuthorDispatcherSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId:
        Ref: AuthorSecurityGroup
      ToPort: 5432
    Type: AWS::EC2::SecurityGroupIngress
  AuthorDispatcherSecurityGroupIngress2:
    Properties:
      Description: "Author-Dispatcher SSH Ingress from Secure Shell Inbound Cidr"
      CidrIp:
        Ref: SecureShellInboundCidrIpParameter
      FromPort: 22
      GroupId:
        Ref: AuthorDispatcherSecurityGroup
      IpProtocol: tcp
      ToPort: 22
    Type: AWS::EC2::SecurityGroupIngress
  AuthorELBSecurityGroup:
    Properties:
      GroupDescription: AEM Author ELB Security Group
      Tags:
      - Key: Name
        Value: AEM Author ELB Security Group
      - Key: StackPrefix
        Value:
          Ref: AOCStackPrefix
      VpcId: !Sub "{{resolve:ssm:/${AOCStackPrefix}/network/vpcid:1}}"
    Type: AWS::EC2::SecurityGroup
  AuthorELBSecurityGroupEgress0:
    Properties:
      Description: "Author ELB AEM Egress to AEM Author"
      DestinationSecurityGroupId:
        Ref: AuthorSecurityGroup
      FromPort: 5432
      GroupId:
        Ref: AuthorELBSecurityGroup
      IpProtocol: tcp
      ToPort: 5432
    Type: AWS::EC2::SecurityGroupEgress
  AuthorELBSecurityGroupIngress0:
    Properties:
      Description: "Author ELB HTTPS Ingress From Author-Dispatcher"
      FromPort: 443
      GroupId:
        Ref: AuthorELBSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId:
        Ref: AuthorDispatcherSecurityGroup
      ToPort: 443
    Type: AWS::EC2::SecurityGroupIngress
  AuthorELBSecurityGroupIngress1:
    Properties:
      Description: "Author ELB HTTPS Ingress From Orchestrator"
      FromPort: 443
      GroupId:
        Ref: AuthorELBSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId:
        Ref: OrchestratorSecurityGroup
      ToPort: 443
    Type: AWS::EC2::SecurityGroupIngress
  AuthorSecurityGroup:
    Properties:
      GroupDescription: AEM Author Security Group
      Tags:
      - Key: Name
        Value: AEM Author Security Group
      - Key: StackPrefix
        Value:
          Ref: AOCStackPrefix
      VpcId: !Sub "{{resolve:ssm:/${AOCStackPrefix}/network/vpcid:1}}"
    Type: AWS::EC2::SecurityGroup
  AuthorSecurityGroupEgress0:
    Properties:
      Description: "Author AEM Egress to AEM Publish"
      DestinationSecurityGroupId:
        Ref: PublishSecurityGroup
      FromPort: 5433
      GroupId:
        Ref: AuthorSecurityGroup
      IpProtocol: tcp
      ToPort: 5433
    Type: AWS::EC2::SecurityGroupEgress
  AuthorSecurityGroupEgress1:
    Properties:
      Description: "Author AEM Egress to AEM Author"
      DestinationSecurityGroupId:
        Ref: AuthorSecurityGroup
      FromPort: 5432
      GroupId:
        Ref: AuthorSecurityGroup
      IpProtocol: tcp
      ToPort: 5432
    Type: AWS::EC2::SecurityGroupEgress
  AuthorSecurityGroupEgress2:
    Properties:
      Description: "Author Cold-Standby Sync Egress to AEM Author"
      DestinationSecurityGroupId:
        Ref: AuthorSecurityGroup
      FromPort: 8023
      GroupId:
        Ref: AuthorSecurityGroup
      IpProtocol: tcp
      ToPort: 8023
    Type: AWS::EC2::SecurityGroupEgress
  AuthorSecurityGroupEgress3:
    Properties:
      Description: "Author HTTPS Egress to Author Dispatcher"
      DestinationSecurityGroupId:
        Ref: AuthorDispatcherSecurityGroup
      FromPort: 443
      GroupId:
        Ref: AuthorSecurityGroup
      IpProtocol: tcp
      ToPort: 443
    Type: AWS::EC2::SecurityGroupEgress
  AuthorSecurityGroupEgress4:
    Properties:
      Description: "Author HTTPS Egress to Inbound CIDR"
      CidrIp:
        Ref: PrivateSubnetInternetOutboundCidrIpParameter
      FromPort: 443
      GroupId:
        Ref: AuthorSecurityGroup
      IpProtocol: tcp
      ToPort: 443
    Type: AWS::EC2::SecurityGroupEgress
  AuthorSecurityGroupIngress0:
    Properties:
      Description: "Author AEM Ingress from Author ELB"
      FromPort: 5432
      GroupId:
        Ref: AuthorSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId:
        Ref: AuthorELBSecurityGroup
      ToPort: 5432
    Type: AWS::EC2::SecurityGroupIngress
  AuthorSecurityGroupIngress1:
    Properties:
      Description: "Author AEM Ingress from AEM Author"
      FromPort: 5432
      GroupId:
        Ref: AuthorSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId:
        Ref: AuthorSecurityGroup
      ToPort: 5432
    Type: AWS::EC2::SecurityGroupIngress
  AuthorSecurityGroupIngress4:
    Properties:
      Description: "Author Cold-Standby Sync Ingress from AEM Author"
      FromPort: 8023
      GroupId:
        Ref: AuthorSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId:
        Ref: AuthorSecurityGroup
      ToPort: 8023
    Type: AWS::EC2::SecurityGroupIngress
  AuthorSecurityGroupIngress5:
    Properties:
      Description: "Author SSH Ingress from Secure Shell Inbound Cidr"
      CidrIp:
        Ref: SecureShellInboundCidrIpParameter
      FromPort: 22
      GroupId:
        Ref: AuthorSecurityGroup
      IpProtocol: tcp
      ToPort: 22
    Type: AWS::EC2::SecurityGroupIngress
  OrchestratorSecurityGroup:
    Properties:
      GroupDescription: AEM Orchestrator Security Group
      Tags:
      - Key: Name
        Value: AEM Orchestrator Security Group
      - Key: StackPrefix
        Value:
          Ref: AOCStackPrefix
      VpcId: !Sub "{{resolve:ssm:/${AOCStackPrefix}/network/vpcid:1}}"
    Type: AWS::EC2::SecurityGroup
  OrchestratorSecurityGroupEgress0:
    Properties:
      Description: "Orchestrator HTTPS Egress to Author ELB"
      DestinationSecurityGroupId:
        Ref: AuthorELBSecurityGroup
      FromPort: 443
      GroupId:
        Ref: OrchestratorSecurityGroup
      IpProtocol: tcp
      ToPort: 443
    Type: AWS::EC2::SecurityGroupEgress
  OrchestratorSecurityGroupEgress1:
    Properties:
      Description: "Orchestrator HTTPS Egress to Internet Outbound Cidr"
      CidrIp:
        Ref: PrivateSubnetInternetOutboundCidrIpParameter
      FromPort: 443
      GroupId:
        Ref: OrchestratorSecurityGroup
      IpProtocol: tcp
      ToPort: 443
    Type: AWS::EC2::SecurityGroupEgress
  OrchestratorSecurityGroupEgress2:
    Properties:
      Description: "Orchestrator AEM Egress to AEM Publish"
      DestinationSecurityGroupId:
        Ref: PublishSecurityGroup
      FromPort: 5433
      GroupId:
        Ref: OrchestratorSecurityGroup
      IpProtocol: tcp
      ToPort: 5433
    Type: AWS::EC2::SecurityGroupEgress
  OrchestratorSecurityGroupIngress0:
    Properties:
      Description: "Orchestrator SSH Ingress from Secure Shell Inbound Cidr"
      CidrIp:
        Ref: SecureShellInboundCidrIpParameter
      FromPort: 22
      GroupId:
        Ref: OrchestratorSecurityGroup
      IpProtocol: tcp
      ToPort: 22
    Type: AWS::EC2::SecurityGroupIngress
  PublishDispatcherELBSecurityGroup:
    Properties:
      GroupDescription: AEM Publish Dispatcher ELB Security Group
      Tags:
      - Key: Name
        Value: AEM Publish Dispatcher ELB Security Group
      - Key: StackPrefix
        Value:
          Ref: AOCStackPrefix
      VpcId: !Sub "{{resolve:ssm:/${AOCStackPrefix}/network/vpcid:1}}"
    Type: AWS::EC2::SecurityGroup
  PublishDispatcherELBSecurityGroupEgress0:
    Properties:
      Description: "PublishDispatcher ELB HTTPS Egress to PublishDispatcher"
      DestinationSecurityGroupId:
        Ref: PublishDispatcherSecurityGroup
      FromPort: 443
      GroupId:
        Ref: PublishDispatcherELBSecurityGroup
      IpProtocol: tcp
      ToPort: 443
    Type: AWS::EC2::SecurityGroupEgress
  PublishDispatcherELBSecurityGroupIngress1:
    Properties:
      Description: "PublishDispatcher ELB HTTPS Ingress from Inbound Cidr"
      CidrIp:
        Ref: PublishDispatcherELBSecurityGroupInboundCidrIpParameter
      FromPort: 443
      GroupId:
        Ref: PublishDispatcherELBSecurityGroup
      IpProtocol: tcp
      ToPort: 443
    Type: AWS::EC2::SecurityGroupIngress
  PublishDispatcherSecurityGroup:
    Properties:
      GroupDescription: AEM Publish Dispatcher Security Group
      Tags:
      - Key: Name
        Value: AEM Publish Dispatcher Security Group
      - Key: StackPrefix
        Value:
          Ref: AOCStackPrefix
      VpcId: !Sub "{{resolve:ssm:/${AOCStackPrefix}/network/vpcid:1}}"
    Type: AWS::EC2::SecurityGroup
  PublishDispatcherSecurityGroupEgress0:
    Properties:
      Description: "PublishDispatcher AEM Egress to AEM Publish"
      DestinationSecurityGroupId:
        Ref: PublishSecurityGroup
      FromPort: 5433
      GroupId:
        Ref: PublishDispatcherSecurityGroup
      IpProtocol: tcp
      ToPort: 5433
    Type: AWS::EC2::SecurityGroupEgress
  PublishDispatcherSecurityGroupEgress1:
    Properties:
      Description: "PublishDispatcher HTTPS Egress to Internet outbound Cidr"
      CidrIp:
        Ref: PrivateSubnetInternetOutboundCidrIpParameter
      FromPort: 443
      GroupId:
        Ref: PublishDispatcherSecurityGroup
      IpProtocol: tcp
      ToPort: 443
    Type: AWS::EC2::SecurityGroupEgress
  PublishDispatcherSecurityGroupIngress0:
    Properties:
      Description: "PublishDispatcher HTTPS Ingress from PublishDispatcher ELB"
      FromPort: 443
      GroupId:
        Ref: PublishDispatcherSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId:
        Ref: PublishDispatcherELBSecurityGroup
      ToPort: 443
    Type: AWS::EC2::SecurityGroupIngress
  PublishDispatcherSecurityGroupIngress1:
    Properties:
      Description: "PublishDispatcher HTTPS Ingress from AEM Publish"
      FromPort: 443
      GroupId:
        Ref: PublishDispatcherSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId:
        Ref: PublishSecurityGroup
      ToPort: 443
    Type: AWS::EC2::SecurityGroupIngress
  PublishDispatcherSecurityGroupIngress2:
    Properties:
      Description: "PublishDispatcher SSH Ingress from Secure Shell inbound Cidr"
      CidrIp:
        Ref: SecureShellInboundCidrIpParameter
      FromPort: 22
      GroupId:
        Ref: PublishDispatcherSecurityGroup
      IpProtocol: tcp
      ToPort: 22
    Type: AWS::EC2::SecurityGroupIngress
  PublishSecurityGroup:
    Properties:
      GroupDescription: AEM Publish Security Group
      Tags:
      - Key: Name
        Value: AEM Publish Security Group
      - Key: StackPrefix
        Value:
          Ref: AOCStackPrefix
      VpcId: !Sub "{{resolve:ssm:/${AOCStackPrefix}/network/vpcid:1}}"
    Type: AWS::EC2::SecurityGroup
  PublishSecurityGroupEgress0:
    Properties:
      Description: "Publish HTTPS Egress to Publish Dispatcher"
      DestinationSecurityGroupId:
        Ref: PublishDispatcherSecurityGroup
      FromPort: 443
      GroupId:
        Ref: PublishSecurityGroup
      IpProtocol: tcp
      ToPort: 443
    Type: AWS::EC2::SecurityGroupEgress
  PublishSecurityGroupEgress1:
    Properties:
      Description: "Publish HTTPS Egress to Private Subnet Inernet Outbound Cidr"
      CidrIp:
        Ref: PrivateSubnetInternetOutboundCidrIpParameter
      FromPort: 443
      GroupId:
        Ref: PublishSecurityGroup
      IpProtocol: tcp
      ToPort: 443
    Type: AWS::EC2::SecurityGroupEgress
  PublishSecurityGroupIngress0:
    Properties:
      Description: "Publish AEM Ingress from Publish Dispatcher"
      FromPort: 5433
      GroupId:
        Ref: PublishSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId:
        Ref: PublishDispatcherSecurityGroup
      ToPort: 5433
    Type: AWS::EC2::SecurityGroupIngress
  PublishSecurityGroupIngress1:
    Properties:
      Description: "Publish AEM Ingress from AEM Publisher"
      FromPort: 5433
      GroupId:
        Ref: PublishSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId:
        Ref: AuthorSecurityGroup
      ToPort: 5433
    Type: AWS::EC2::SecurityGroupIngress
  PublishSecurityGroupIngress2:
    Properties:
      Description: "Publish SSH Ingress from Secure Shell inbound Cidr"
      CidrIp:
        Ref: SecureShellInboundCidrIpParameter
      FromPort: 22
      GroupId:
        Ref: PublishSecurityGroup
      IpProtocol: tcp
      ToPort: 22
    Type: AWS::EC2::SecurityGroupIngress
  PublishSecurityGroupIngress3:
    Properties:
      Description: "Publish AEM Ingress from Orchestrator"
      FromPort: 5433
      GroupId:
        Ref: PublishSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId:
        Ref: OrchestratorSecurityGroup
      ToPort: 5433
    Type: AWS::EC2::SecurityGroupIngress
  AuthorDispatcherELBSecurityGroupSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${AOCStackPrefix}/network/sg/authordispatcherelb
      Description: Author Dispatcher ELB Security Group
      Type: String
      Value: !Ref AuthorDispatcherELBSecurityGroup
  AuthorDispatcherSecurityGroupSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${AOCStackPrefix}/network/sg/authordispatcher
      Description: Author Dispatcher Security Group
      Type: String
      Value: !Ref AuthorDispatcherSecurityGroup
  AuthorELBSecurityGroupSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${AOCStackPrefix}/network/sg/authorelb
      Description: Author ELB Security Group
      Type: String
      Value: !Ref AuthorELBSecurityGroup
  AuthorSecurityGroupSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${AOCStackPrefix}/network/sg/author
      Description: Author Security Group
      Type: String
      Value: !Ref AuthorSecurityGroup
  OrchestratorSecurityGroupSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${AOCStackPrefix}/network/sg/orchestrator
      Description: Orchestrator Security Group
      Type: String
      Value: !Ref OrchestratorSecurityGroup
  PublishDispatcherELBSecurityGroupSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${AOCStackPrefix}/network/sg/publishdispatcherelb
      Description: Publish Dispatcher ELB Security Group
      Type: String
      Value: !Ref PublishDispatcherELBSecurityGroup
  PublishDispatcherSecurityGroupSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${AOCStackPrefix}/network/sg/publishdispatcher
      Description: Publish Dispatcher Security Group
      Type: String
      Value: !Ref PublishDispatcherSecurityGroup
  PublishSecurityGroupSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${AOCStackPrefix}/network/sg/publish
      Description: Publish Security Group
      Type: String
      Value: !Ref PublishSecurityGroup
